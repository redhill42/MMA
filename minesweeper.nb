(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[     43504,        941]
NotebookOptionsPosition[     42811,        914]
NotebookOutlinePosition[     43267,        933]
CellTagsIndexPosition[     43224,        930]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<Common`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<Minesweeper`\>\"", "]"}], ";"}], "\n", 
 RowBox[{"Minesweeper", "[", "]"}]}], "Input",
 CellChangeTimes->{
  3.729241058513691*^9, {3.729279161163044*^9, 3.729279165721704*^9}, {
   3.729394691579529*^9, 
   3.7293946961305027`*^9}},ExpressionUUID->"2221c1e8-436a-4c42-84b4-\
1a6deb88142a"],

Cell[BoxData[
 DynamicModuleBox[{Minesweeper`Private`grid$$ = Minesweeper`Private`self$2070,
   Minesweeper`Private`plotter$$ = Minesweeper`Private`self$2072, 
  Minesweeper`Private`autoSolve$$ = False, Minesweeper`Private`uncertain$$ = 
  "Guess", Minesweeper`Private`greedy$$ = False, 
  Minesweeper`Private`clickOnly$$ = False, Minesweeper`Private`safe$$ = {}, 
  Minesweeper`Private`cheats$$ = {}, Minesweeper`Private`solved$$ = {}, 
  Minesweeper`Private`reset$$, Minesweeper`Private`solve$$, 
  Minesweeper`Private`step$$, Minesweeper`Private`options$$}, 
  PanelBox[
   TagBox[GridBox[{
      {
       ItemBox[
        TemplateBox[{
         ButtonBox[
          "\"Restart\"", ButtonFunction :> Minesweeper`Private`reset$$[
             CurrentValue["AltKey"]], Appearance -> Automatic, Evaluator -> 
           Automatic, Method -> "Preemptive"],ButtonBox[
          "\"Solve\"", 
           ButtonFunction :> (Minesweeper`Private`autoSolve$$ = True; 
            Minesweeper`Private`solved$$ = {}), Appearance -> Automatic, 
           Evaluator -> Automatic, Method -> "Preemptive"],ButtonBox[
          "\"Step\"", ButtonFunction :> Minesweeper`Private`step$$[], 
           Appearance -> Automatic, Evaluator -> Automatic, Method -> 
           "Preemptive"],ButtonBox[
          "\"Options\"", ButtonFunction :> Minesweeper`Private`options$$[], 
           Appearance -> Automatic, Evaluator -> Automatic, Method -> 
           "Preemptive"]},
         "RowDefault"],
        Alignment->Center,
        StripOnInput->False], "\[SpanFromLeft]", "\[SpanFromLeft]"},
      {
       TagBox[
        DynamicBox[ToBoxes[
          If[Minesweeper`Private`autoSolve$$, 
           Refresh[
            Minesweeper`Private`solve$$[], UpdateInterval -> 0.1, 
            TrackedSymbols -> {}], 
           Minesweeper`Private`plotter$$[
            
            Minesweeper`Private`plotBoard[{
             Minesweeper`Private`safe$$ -> LightBlue, 
              Minesweeper`Private`cheats$$ -> LightRed, 
              Minesweeper`Private`solved$$ -> LightGreen}]]], StandardForm],
         ImageSizeCache->{433., {220.62548828125, 228.37451171875}}],
        EventHandlerTag[{{"MouseDown", 1} :> (
           Minesweeper`Private`safe$$ = Minesweeper`Private`grid$$[
              Minesweeper`Private`safe$$[
               Minesweeper`Private`plotter$$[Minesweeper`Private`mousePos]]]; 
           Minesweeper`Private`autoSolve$$ = False; 
           Minesweeper`Private`solved$$ = {}), {"MouseDragged", 1} :> (
           Minesweeper`Private`safe$$ = Minesweeper`Private`grid$$[
             Minesweeper`Private`safe$$[
              Minesweeper`Private`plotter$$[
              Minesweeper`Private`mousePos]]]), {"MouseUp", 1} :> (
           Minesweeper`Private`safe$$ = {}; Minesweeper`Private`grid$$[
             Minesweeper`Private`click[
              Minesweeper`Private`plotter$$[Minesweeper`Private`mousePos], 
              CurrentValue["AltKey"]]]), {"MouseUp", 2} :> (
           Minesweeper`Private`grid$$[
             Minesweeper`Private`mark[
              Minesweeper`Private`plotter$$[Minesweeper`Private`mousePos]]]; 
           Minesweeper`Private`autoSolve$$ = False; 
           Minesweeper`Private`solved$$ = {}), Method -> "Preemptive", 
          PassEventsDown -> Automatic, PassEventsUp -> True}]], 
       "\[SpanFromLeft]", "\[SpanFromLeft]"},
      {
       ItemBox[
        DynamicBox[ToBoxes[
          If[
           Minesweeper`Private`grid$$[Minesweeper`Private`success], 
           "Success!", 
           Minesweeper`Private`grid$$[Minesweeper`Private`minesRemaining]], 
          StandardForm],
         ImageSizeCache->{19., {1., 11.}}],
        Alignment->Left,
        ItemSize->10,
        StripOnInput->False], 
       ItemBox[
        DynamicBox[ToBoxes[
          Which[
           Not[
            Minesweeper`Private`grid$$[Minesweeper`Private`started]], 0, 
           Or[
            Minesweeper`Private`grid$$[Minesweeper`Private`boomed], 
            Minesweeper`Private`grid$$[Minesweeper`Private`success]], 
           NumberForm[
            Minesweeper`Private`grid$$[Minesweeper`Private`timeUsed], {
            Infinity, 2}], True, 
           Refresh[
            Round[
             Minesweeper`Private`grid$$[Minesweeper`Private`timeUsed]], 
            UpdateInterval -> 0.5]], StandardForm],
         ImageSizeCache->{9., {1., 11.}}],
        StripOnInput->False], 
       ItemBox[
        DynamicBox[ToBoxes[
          If[Length[Minesweeper`Private`cheats$$] > 1, 
           StringJoin["Guess: ", 
            ToString[Length[Minesweeper`Private`cheats$$] - 1]], ""], 
          StandardForm],
         ImageSizeCache->{0., {0., 8.}}],
        Alignment->Right,
        ItemSize->10,
        StripOnInput->False]},
      {
       ItemBox[
        TemplateBox[{
         ButtonBox[
          "\"Beginner\"", ButtonFunction :> 
           Minesweeper`Private`reset$$[9, 9, 10], Appearance -> Automatic, 
           Evaluator -> Automatic, Method -> "Preemptive"],ButtonBox[
          "\"Intermediate\"", ButtonFunction :> 
           Minesweeper`Private`reset$$[16, 16, 40], Appearance -> Automatic, 
           Evaluator -> Automatic, Method -> "Preemptive"],ButtonBox[
          "\"Expert\"", ButtonFunction :> 
           Minesweeper`Private`reset$$[16, 30, 99], Appearance -> Automatic, 
           Evaluator -> Automatic, Method -> "Preemptive"]},
         "RowDefault"],
        Alignment->Center,
        StripOnInput->False], "\[SpanFromLeft]", "\[SpanFromLeft]"}
     },
     AutoDelete->False,
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"]],
  Deinitialization:>Minesweeper`Private`reset$$[],
  DynamicModuleValues:>{{
    DownValues[Minesweeper`Private`reset$$] = {HoldPattern[
         Minesweeper`Private`reset$$[
          Pattern[Minesweeper`Private`args$, 
           BlankNullSequence[]]]] :> (Minesweeper`Private`grid$$[
          Minesweeper`Private`reset$$[Minesweeper`Private`args$]]; 
        Minesweeper`Private`autoSolve$$ = False; 
        Minesweeper`Private`safe$$ = (
          Minesweeper`Private`cheats$$ = (Minesweeper`Private`solved$$ = {})); 
        Null)}}, {DownValues[Minesweeper`Private`solve$$] = {HoldPattern[
         Minesweeper`Private`solve$$[]] :> (Which[
          Or[
           Minesweeper`Private`grid$$[Minesweeper`Private`boomed], 
           Minesweeper`Private`grid$$[Minesweeper`Private`success]], 
          Minesweeper`Private`autoSolve$$ = False, 
          Minesweeper`Private`grid$$[
           Minesweeper`Private`solve$$[
           Minesweeper`Private`Greedy -> Minesweeper`Private`greedy$$, 
            Minesweeper`Private`ClickOnly -> 
            Minesweeper`Private`clickOnly$$]], Null, 
          Or[Minesweeper`Private`uncertain$$ == "Cheat", 
           Not[
            Minesweeper`Private`grid$$[Minesweeper`Private`started]]], 
          AppendTo[Minesweeper`Private`cheats$$, 
           Minesweeper`Private`grid$$[
            Minesweeper`Private`randomClick[True]]], 
          Minesweeper`Private`uncertain$$ == "Guess", 
          AppendTo[Minesweeper`Private`cheats$$, 
           Minesweeper`Private`grid$$[
            Minesweeper`Private`randomClick[False]]], True, 
          Minesweeper`Private`autoSolve$$ = False]; 
        Minesweeper`Private`plotter$$[
          
          Minesweeper`Private`plotBoard[{
           Minesweeper`Private`cheats$$ -> LightRed}]])}}, {
    DownValues[Minesweeper`Private`step$$] = {HoldPattern[
         Minesweeper`Private`step$$[]] :> (Which[
          Or[
           Minesweeper`Private`grid$$[Minesweeper`Private`boomed], 
           Minesweeper`Private`grid$$[Minesweeper`Private`success]], Null, 
          First[
           Reap[
            Minesweeper`Private`grid$$[
             Minesweeper`Private`solve$$[
             Minesweeper`Private`Greedy -> Minesweeper`Private`greedy$$, 
              Minesweeper`Private`ClickOnly -> 
              Minesweeper`Private`clickOnly$$]], 
            Blank[], (Minesweeper`Private`solved$$ = Apply[Join, #2])& ]], 
          Null, True, 
          AppendTo[Minesweeper`Private`cheats$$, 
           Minesweeper`Private`grid$$[
            Minesweeper`Private`randomClick[True]]]]; Null)}}, {
    DownValues[Minesweeper`Private`options$$] = {HoldPattern[
         Minesweeper`Private`options$$[]] :> CreateDialog[{"When uncertain: ", 
          RadioButtonBar[
           Dynamic[Minesweeper`Private`uncertain$$], {
           "Guess", "Cheat", "Pause"}], 
          Row[{
            Checkbox[
             Dynamic[Minesweeper`Private`greedy$$]], " Greedy mode "}], 
          Row[{
            Checkbox[
             Dynamic[Minesweeper`Private`clickOnly$$]], " No Flags "}], 
          DefaultButton[]}, Modal -> True, WindowTitle -> "Options"]}}},
  Initialization:>{
   Attributes[Minesweeper`Private`self$2070] = {HoldFirst, Temporary}, 
    Minesweeper`Private`self$2070[
      Pattern[Minesweeper`Private`s$, 
       Blank[Symbol]]] := Minesweeper`Private`dispatch$2070[
      Minesweeper`Private`clean[Minesweeper`Private`s$]], 
    Minesweeper`Private`self$2070[
      Pattern[Minesweeper`Private`s$, 
       Blank[Symbol]][
       Pattern[Minesweeper`Private`args$, 
        BlankNullSequence[]]]] := Minesweeper`Private`dispatch$2070[
      Minesweeper`Private`clean[Minesweeper`Private`s$], 
      Minesweeper`Private`args$], 
    Attributes[Minesweeper`Private`s$] = {Temporary}, 
    Attributes[Minesweeper`Private`dispatch$2070] = {Temporary}, 
    Minesweeper`Private`dispatch$2070["boomed"] := 
    Minesweeper`Private`boomed$2070, 
    Minesweeper`Private`dispatch$2070["cols"] := 
    Minesweeper`Private`cols$2070, Minesweeper`Private`dispatch$2070["mines"] := 
    Minesweeper`Private`mines$2070, 
    Minesweeper`Private`dispatch$2070["minesRemaining"] := 
    If[Minesweeper`Private`success$2070, 0, 
      Minesweeper`Private`minesRemaining$2070], 
    Minesweeper`Private`dispatch$2070["remaining"] := 
    Minesweeper`Private`remaining$2070, 
    Minesweeper`Private`dispatch$2070["rows"] := 
    Minesweeper`Private`rows$2070, Minesweeper`Private`dispatch$2070["show"] := 
    Array[
      Composition[Minesweeper`Private`show$2070, List], {
      Minesweeper`Private`rows$2070, Minesweeper`Private`cols$2070}], 
    Minesweeper`Private`dispatch$2070["started"] := 
    Minesweeper`Private`startTime$2070 != 0, 
    Minesweeper`Private`dispatch$2070["success"] := 
    Minesweeper`Private`success$2070, 
    Minesweeper`Private`dispatch$2070["timeUsed"] := 
    Which[Minesweeper`Private`startTime$2070 == 0, 0, 
      Minesweeper`Private`stopTime$2070 != 0, 
      Minesweeper`Private`stopTime$2070 - Minesweeper`Private`startTime$2070, 
      True, SessionTime[] - Minesweeper`Private`startTime$2070], 
    Minesweeper`Private`dispatch$2070["randomClick", True] := 
    With[{Minesweeper`Private`alternative$ = AnyTrue[
         Minesweeper`Private`neighbors$2070[#, 
          Minesweeper`Private`clicked$2070], And[
         Minesweeper`Private`markRemains$2070[#] == 1, Length[
            
            Minesweeper`Private`neighbors$2070[#, 
             Minesweeper`Private`freeQ$2070]] == 2]& ]& }, 
      Minesweeper`Private`click$2070[
       SelectFirst[
        Apply[Join, 
         Array[
         List, {Minesweeper`Private`rows$2070, 
           Minesweeper`Private`cols$2070}]], And[
         Minesweeper`Private`freeQ$2070[#], 
         Not[
          Minesweeper`Private`mineQ$2070[#]], 
         Minesweeper`Private`alternative$[#]]& , 
        Minesweeper`Private`randomCell$2070[And[
          Minesweeper`Private`freeQ$2070[#], 
          Not[
           Minesweeper`Private`mineQ$2070[#]]]& ]]]], 
    Minesweeper`Private`dispatch$2070["click", 
      Pattern[Minesweeper`Private`cell$, 
       Blank[]], True] := If[
      Minesweeper`Private`mineQ$2070[Minesweeper`Private`cell$], 
      Minesweeper`Private`mark$2070[Minesweeper`Private`cell$], 
      Minesweeper`Private`click$2070[Minesweeper`Private`cell$]], 
    Minesweeper`Private`dispatch$2070["click", 
      Pattern[Minesweeper`Private`cell$, 
       Blank[]], 
      Optional[
       Blank[], False]] := If[
      Not[
       Minesweeper`Private`marked$2070[Minesweeper`Private`cell$]], 
      Minesweeper`Private`click$2070[Minesweeper`Private`cell$]], 
    Minesweeper`Private`dispatch$2070["mark", 
      Pattern[Minesweeper`Private`cell$, 
       Blank[]]] := Minesweeper`Private`mark$2070[Minesweeper`Private`cell$], 
    Minesweeper`Private`dispatch$2070["safe", 
      Pattern[Minesweeper`Private`cell$, 
       Blank[]]] := Minesweeper`Private`safe$2070[Minesweeper`Private`cell$], 
    Minesweeper`Private`dispatch$2070["reset", 
      Optional[
       Pattern[Minesweeper`Private`keep$, 
        Blank[]], False]] := If[Minesweeper`Private`keep$, 
      Minesweeper`Private`restart$2070[], 
      Minesweeper`Private`reset$2070[
      Minesweeper`Private`rows$2070, Minesweeper`Private`cols$2070, 
       Minesweeper`Private`mines$2070]], 
    Minesweeper`Private`dispatch$2070["reset", 
      Pattern[Minesweeper`Private`rows1$, 
       Blank[Integer]], 
      Pattern[Minesweeper`Private`cols1$, 
       Blank[Integer]], 
      Pattern[Minesweeper`Private`mines1$, 
       Blank[Integer]]] := 
    Minesweeper`Private`reset$2070[
     Minesweeper`Private`rows1$, Minesweeper`Private`cols1$, 
      Minesweeper`Private`mines1$], 
    Minesweeper`Private`dispatch$2070["randomClick", 
      Optional[
       Blank[], False]] := With[{Minesweeper`Private`reasoningMineQ$ = AnyTrue[
         Minesweeper`Private`neighbors$2070[#, 
          Minesweeper`Private`clicked$2070], 
         Minesweeper`Private`markRemains$2070[#] == Length[
           
           Minesweeper`Private`neighbors$2070[#, 
            Minesweeper`Private`freeQ$2070]]& ]& }, 
      Minesweeper`Private`click$2070[
       Minesweeper`Private`randomCell$2070[And[
         Minesweeper`Private`freeQ$2070[#], 
         Not[
          Minesweeper`Private`reasoningMineQ$[#]]]& ]]], 
    Minesweeper`Private`dispatch$2070["solve", 
      OptionsPattern[{
       Minesweeper`Private`Greedy -> False, Minesweeper`Private`ClickOnly -> 
        False}]] := 
    With[{Minesweeper`Private`clickOnly$ = 
       OptionValue[Minesweeper`Private`ClickOnly]}, 
      With[{
       Minesweeper`Private`k$ = 
        If[
         Minesweeper`Private`clickOnly$, 
          With[{Minesweeper`Private`clicks$ = 
            Cases[#, (Pattern[Minesweeper`Private`pos, 
                 Blank[]] -> 0) :> Minesweeper`Private`pos]}, 
           And[
           Length[Minesweeper`Private`clicks$] != 0, 
            Scan[Minesweeper`Private`click$2070, 
              Sow[Minesweeper`Private`clicks$]]; True]]& , 
          With[{Minesweeper`Private`clicks$ = 
            Cases[#, (Pattern[Minesweeper`Private`pos, 
                 Blank[]] -> 0) :> Minesweeper`Private`pos], 
            Minesweeper`Private`marks$ = 
            Cases[#, (Pattern[Minesweeper`Private`pos, 
                 Blank[]] -> 1) :> Minesweeper`Private`pos]}, 
           And[
           Length[Minesweeper`Private`clicks$] + 
             Length[Minesweeper`Private`marks$] != 0, 
            Scan[Minesweeper`Private`click$2070, 
              Sow[Minesweeper`Private`clicks$]]; 
            Scan[Minesweeper`Private`mark$2070, 
              Sow[Minesweeper`Private`marks$]]; True]]& ]}, 
       Or[
        If[
         OptionValue[Minesweeper`Private`Greedy], 
         AnyTrue[
          Array[
           Composition[
            Minesweeper`Private`solve$2070[
            Minesweeper`Private`k$, Minesweeper`Private`clickOnly$], List], {
           Minesweeper`Private`rows$2070, Minesweeper`Private`cols$2070}], 
          Identity, 2], 
         AnyTrue[
          Array[
          List, {Minesweeper`Private`rows$2070, 
            Minesweeper`Private`cols$2070}], 
          Minesweeper`Private`solve$2070[
          Minesweeper`Private`k$, Minesweeper`Private`clickOnly$], 2]], 
        And[Minesweeper`Private`minesRemaining$2070 < 5, 
         Minesweeper`Private`solve0$2070[Minesweeper`Private`k$, 
          Apply[Join, 
           Array[If[
             Minesweeper`Private`freeQ$2070[{
               SlotSequence[1]}], {
              SlotSequence[1]}, Nothing]& , {
            Minesweeper`Private`rows$2070, Minesweeper`Private`cols$2070}]], 
          Minesweeper`Private`minesRemaining$2070]]]]], 
    Minesweeper`Private`dispatch$2070["solve", 
      Pattern[Minesweeper`Private`cell$, 
       Blank[]]] := 
    Minesweeper`Private`solve$2070[Identity][Minesweeper`Private`cell$], 
    Attributes[Minesweeper`Private`rows$2070] = {Temporary}, 
    Minesweeper`Private`rows$2070 = 16, 
    Attributes[Minesweeper`Private`cols$2070] = {Temporary}, 
    Minesweeper`Private`cols$2070 = 16, 
    Attributes[Minesweeper`Private`mines$2070] = {Temporary}, 
    Minesweeper`Private`mines$2070 = 40, 
    Attributes[Minesweeper`Private`show$2070] = {Temporary}, 
    Minesweeper`Private`show$2070[
      PatternTest[
       Pattern[Minesweeper`Private`cell$, 
        Blank[]], Minesweeper`Private`clicked$2070]] := If[
      Minesweeper`Private`mineQ$2070[Minesweeper`Private`cell$], "X", 
      Minesweeper`Private`grid$2070[Minesweeper`Private`cell$]], 
    Minesweeper`Private`show$2070[
      PatternTest[
       Pattern[Minesweeper`Private`cell$, 
        Blank[]], Minesweeper`Private`marked$2070]] := If[
      Or[
       Minesweeper`Private`mineQ$2070[Minesweeper`Private`cell$], 
       Not[
        Or[
        Minesweeper`Private`boomed$2070, Minesweeper`Private`success$2070]]], 
      "m", "w"], Minesweeper`Private`show$2070[
      PatternTest[
       Pattern[Minesweeper`Private`cell$, 
        Blank[]], Minesweeper`Private`mineQ$2070]] := 
    If[Minesweeper`Private`boomed$2070, "x", 
      If[Minesweeper`Private`success$2070, "m", " "]], 
    Minesweeper`Private`show$2070[
      Blank[]] = " ", Attributes[Minesweeper`Private`cell$] = {Temporary}, 
    Attributes[Minesweeper`Private`clicked$2070] = {Temporary}, 
    Minesweeper`Private`clicked$2070[
      Blank[]] = False, 
    Attributes[Minesweeper`Private`mineQ$2070] = {Temporary}, 
    Minesweeper`Private`mineQ$2070 = 
    Minesweeper`Private`grid$2070[#] == "x"& , 
    Attributes[Minesweeper`Private`grid$2070] = {Temporary}, 
    Minesweeper`Private`grid$2070[
      Blank[]] = 0, Attributes[Minesweeper`Private`marked$2070] = {Temporary},
     Minesweeper`Private`marked$2070[
      Blank[]] = False, 
    Attributes[Minesweeper`Private`boomed$2070] = {Temporary}, 
    Minesweeper`Private`boomed$2070 = False, 
    Attributes[Minesweeper`Private`success$2070] = {Temporary}, 
    Minesweeper`Private`success$2070 := 
    Minesweeper`Private`remaining$2070 == 0, 
    Attributes[Minesweeper`Private`remaining$2070] = {Temporary}, 
    Minesweeper`Private`remaining$2070 = 216, 
    Attributes[Minesweeper`Private`startTime$2070] = {Temporary}, 
    Minesweeper`Private`startTime$2070 = 0, 
    Attributes[Minesweeper`Private`minesRemaining$2070] = {Temporary}, 
    Minesweeper`Private`minesRemaining$2070 = 40, 
    Attributes[Minesweeper`Private`stopTime$2070] = {Temporary}, 
    Minesweeper`Private`stopTime$2070 = 0, 
    Attributes[Minesweeper`Private`alternative$] = {Temporary}, 
    Attributes[Minesweeper`Private`neighbors$2070] = {Temporary}, 
    Minesweeper`Private`neighbors$2070[
      Pattern[Minesweeper`Private`cell$, 
       Blank[]], 
      Pattern[Minesweeper`Private`crit$, 
       Blank[]]] := Select[
      Map[Minesweeper`Private`cell$ + #& , 
       Tuples[{-1, 0, 1}, 2]], And[# != Minesweeper`Private`cell$, 
       Apply[And, 
        Thread[
        1 <= # <= {
          Minesweeper`Private`rows$2070, Minesweeper`Private`cols$2070}]], 
       Minesweeper`Private`crit$[#]]& ], 
    Attributes[Minesweeper`Private`crit$] = {Temporary}, 
    Attributes[Minesweeper`Private`markRemains$2070] = {Temporary}, 
    Minesweeper`Private`markRemains$2070 = 
    Minesweeper`Private`grid$2070[#] - Length[
      Minesweeper`Private`neighbors$2070[#, 
       Minesweeper`Private`marked$2070]]& , 
    Attributes[Minesweeper`Private`freeQ$2070] = {Temporary}, 
    Minesweeper`Private`freeQ$2070 = Not[
      Or[
       Minesweeper`Private`clicked$2070[#], 
       Minesweeper`Private`marked$2070[#]]]& , 
    Attributes[Minesweeper`Private`click$2070] = {Temporary}, 
    Minesweeper`Private`click$2070[
      Pattern[Minesweeper`Private`cell$, 
       Blank[]]] := (
     Minesweeper`Private`start$2070[Minesweeper`Private`cell$]; Which[
       Or[Minesweeper`Private`boomed$2070, Minesweeper`Private`success$2070], 
       Null, 
       Minesweeper`Private`mineQ$2070[Minesweeper`Private`cell$], 
       Minesweeper`Private`clicked$2070[Minesweeper`Private`cell$] = True; 
       Minesweeper`Private`boomed$2070 = True, 
       Minesweeper`Private`marked$2070[Minesweeper`Private`cell$], 
       Minesweeper`Private`boomed$2070 = True, 
       Minesweeper`Private`clicked$2070[Minesweeper`Private`cell$], 
       If[
       Minesweeper`Private`markRemains$2070[Minesweeper`Private`cell$] == 0, 
        Scan[Minesweeper`Private`click$2070, 
         Minesweeper`Private`neighbors$2070[
         Minesweeper`Private`cell$, Minesweeper`Private`freeQ$2070]]], True, 
       Minesweeper`Private`clicked$2070[Minesweeper`Private`cell$] = True; 
       Decrement[Minesweeper`Private`remaining$2070]; 
       If[Minesweeper`Private`grid$2070[Minesweeper`Private`cell$] == 0, 
         Scan[Minesweeper`Private`click$2070, 
          Minesweeper`Private`neighbors$2070[
          Minesweeper`Private`cell$, Minesweeper`Private`freeQ$2070]]]]; 
     Minesweeper`Private`stop$2070[]; Minesweeper`Private`cell$), 
    Attributes[Minesweeper`Private`start$2070] = {Temporary}, 
    Minesweeper`Private`start$2070[
      Pattern[Minesweeper`Private`init$, 
       Blank[]]] := 
    If[Minesweeper`Private`startTime$2070 == 0, 
      Minesweeper`Private`startTime$2070 = SessionTime[]; If[
        Not[Minesweeper`Private`inited$2070], 
        Minesweeper`Private`inited$2070 = True; 
        With[{Minesweeper`Private`excludes$ = 
           If[Minesweeper`Private`init$ =!= Nothing, 
             Append[
              Minesweeper`Private`neighbors$2070[
              Minesweeper`Private`init$, True& ], 
              Minesweeper`Private`init$], {}]}, 
          Do[Minesweeper`Private`grid$2070[
             Minesweeper`Private`randomCell$2070[And[
               Not[
                Minesweeper`Private`mineQ$2070[#]], 
               Not[
                MemberQ[Minesweeper`Private`excludes$, #]]]& ]] = "x", 
           Minesweeper`Private`mines$2070]]; 
        Minesweeper`Private`calcNeighbors$2070[]]], 
    Attributes[Minesweeper`Private`init$] = {Temporary}, 
    Attributes[Minesweeper`Private`inited$2070] = {Temporary}, 
    Minesweeper`Private`inited$2070 = False, 
    Attributes[Minesweeper`Private`excludes$] = {Temporary}, 
    Attributes[Minesweeper`Private`randomCell$2070] = {Temporary}, 
    Minesweeper`Private`randomCell$2070[
      Pattern[Minesweeper`Private`pred$, 
       Blank[]]] := Do[
      With[{Minesweeper`Private`cell$ = QuotientRemainder[
           RandomInteger[
           Minesweeper`Private`rows$2070 Minesweeper`Private`cols$2070 - 1], 
           Minesweeper`Private`cols$2070] + {1, 1}}, 
       If[
        Minesweeper`Private`pred$[Minesweeper`Private`cell$], 
        Return[Minesweeper`Private`cell$]]], Infinity], 
    Attributes[Minesweeper`Private`pred$] = {Temporary}, 
    Attributes[Minesweeper`Private`calcNeighbors$2070] = {Temporary}, 
    Minesweeper`Private`calcNeighbors$2070[] := Do[
      With[{
       Minesweeper`Private`cell$ = {
         Minesweeper`Private`x, Minesweeper`Private`y}}, 
       If[
        Not[
         Minesweeper`Private`mineQ$2070[Minesweeper`Private`cell$]], 
        Minesweeper`Private`grid$2070[Minesweeper`Private`cell$] = Length[
          Minesweeper`Private`neighbors$2070[
          Minesweeper`Private`cell$, Minesweeper`Private`mineQ$2070]]]], {
      Minesweeper`Private`x, 1, Minesweeper`Private`rows$2070}, {
      Minesweeper`Private`y, 1, Minesweeper`Private`cols$2070}], 
    Attributes[Minesweeper`Private`stop$2070] = {Temporary}, 
    Minesweeper`Private`stop$2070[] := If[
      And[Minesweeper`Private`stopTime$2070 == 0, 
       Or[Minesweeper`Private`boomed$2070, Minesweeper`Private`success$2070]],
       Minesweeper`Private`stopTime$2070 = SessionTime[]], 
    Attributes[Minesweeper`Private`mark$2070] = {Temporary}, 
    Minesweeper`Private`mark$2070[
      Pattern[Minesweeper`Private`cell$, 
       Blank[]]] := (Minesweeper`Private`start$2070[Nothing]; If[
       And[
        Not[
         Or[
         Minesweeper`Private`boomed$2070, Minesweeper`Private`success$2070]], 
        
        Not[
         Minesweeper`Private`clicked$2070[Minesweeper`Private`cell$]]], 
       If[Minesweeper`Private`marked$2070[Minesweeper`Private`cell$] = Not[
          Minesweeper`Private`marked$2070[Minesweeper`Private`cell$]], 
        Decrement[Minesweeper`Private`minesRemaining$2070], 
        Increment[Minesweeper`Private`minesRemaining$2070]]]; 
     Minesweeper`Private`cell$), 
    Attributes[Minesweeper`Private`safe$2070] = {Temporary}, 
    Minesweeper`Private`safe$2070[
      Condition[
       Pattern[Minesweeper`Private`cell$, 
        Blank[]], 
       Or[Minesweeper`Private`boomed$2070, Minesweeper`Private`success$2070, 
        Minesweeper`Private`marked$2070[Minesweeper`Private`cell$]]]] = {}, 
    Minesweeper`Private`safe$2070[
      PatternTest[
       Pattern[Minesweeper`Private`cell$, 
        Blank[]], Minesweeper`Private`clicked$2070]] := 
    Minesweeper`Private`neighbors$2070[
     Minesweeper`Private`cell$, Minesweeper`Private`freeQ$2070], 
    Minesweeper`Private`safe$2070[
      Pattern[Minesweeper`Private`cell, 
       Blank[]]] := {Minesweeper`Private`cell}, 
    Attributes[Minesweeper`Private`keep$] = {Temporary}, 
    Attributes[Minesweeper`Private`restart$2070] = {Temporary}, 
    Minesweeper`Private`restart$2070[] := (
     Clear[Minesweeper`Private`clicked$2070, Minesweeper`Private`marked$2070]; 
     Minesweeper`Private`clicked$2070[
        Blank[]] = False; Minesweeper`Private`marked$2070[
        Blank[]] = False; Minesweeper`Private`boomed$2070 = False; 
     Minesweeper`Private`startTime$2070 = (Minesweeper`Private`stopTime$2070 = 
       0); Minesweeper`Private`minesRemaining$2070 = 
      Minesweeper`Private`mines$2070; 
     Minesweeper`Private`remaining$2070 = 
      Minesweeper`Private`rows$2070 Minesweeper`Private`cols$2070 - 
       Minesweeper`Private`mines$2070; Null), 
    Attributes[Minesweeper`Private`reset$2070] = {Temporary}, 
    Minesweeper`Private`reset$2070[
      Pattern[Minesweeper`Private`rows1$, 
       Blank[]], 
      Pattern[Minesweeper`Private`cols1$, 
       Blank[]], 
      Pattern[Minesweeper`Private`mines1$, 
       Blank[]], 
      Optional[
       Pattern[Minesweeper`Private`sample$, 
        Blank[]], {}]] := ({
       Minesweeper`Private`rows$2070, Minesweeper`Private`cols$2070, 
        Minesweeper`Private`mines$2070} = {
       Minesweeper`Private`rows1$, Minesweeper`Private`cols1$, 
        Minesweeper`Private`mines1$}; Clear[Minesweeper`Private`grid$2070]; 
     Minesweeper`Private`grid$2070[
        Blank[]] = 0; Minesweeper`Private`inited$2070 = False; 
     Minesweeper`Private`restart$2070[]; 
     If[Length[Minesweeper`Private`sample$] != 0, 
       Minesweeper`Private`mines$2070 = (
         Minesweeper`Private`minesRemaining$2070 = 
         Length[Minesweeper`Private`sample$]); 
       Minesweeper`Private`remaining$2070 = 
        Minesweeper`Private`rows$2070 Minesweeper`Private`cols$2070 - 
         Minesweeper`Private`mines$2070; 
       Scan[(Minesweeper`Private`grid$2070[#] = "x")& , 
         Minesweeper`Private`sample$]; 
       Minesweeper`Private`calcNeighbors$2070[]; 
       Minesweeper`Private`inited$2070 = True]; Null), 
    Attributes[Minesweeper`Private`rows1$] = {Temporary}, 
    Attributes[Minesweeper`Private`cols1$] = {Temporary}, 
    Attributes[Minesweeper`Private`mines1$] = {Temporary}, 
    Attributes[Minesweeper`Private`sample$] = {Temporary}, 
    Attributes[Minesweeper`Private`reasoningMineQ$] = {Temporary}, 
    Attributes[Minesweeper`Private`clickOnly$] = {Temporary}, 
    Attributes[Minesweeper`Private`k$] = {Temporary}, 
    Attributes[Minesweeper`Private`clicks$] = {Temporary}, 
    Attributes[Minesweeper`Private`marks$] = {Temporary}, 
    Attributes[Minesweeper`Private`solve$2070] = {Temporary}, 
    Minesweeper`Private`solve$2070[
      Pattern[Minesweeper`Private`k$, 
       Blank[]], 
      Optional[
       Pattern[Minesweeper`Private`priori$, 
        Blank[]], False]][
      Pattern[Minesweeper`Private`cell$, 
       Blank[]]] := 
    With[{Minesweeper`Private`v$ = 
       Minesweeper`Private`neighbors$2070[
        Minesweeper`Private`cell$, Minesweeper`Private`freeQ$2070]}, 
      Which[
       Or[
        Not[
         Minesweeper`Private`clicked$2070[Minesweeper`Private`cell$]], 
        Length[Minesweeper`Private`v$] == 0], 
       Minesweeper`Private`k$[{}], 
       And[
       Minesweeper`Private`priori$, 
        Minesweeper`Private`markRemains$2070[Minesweeper`Private`cell$] == 0], 
       Minesweeper`Private`k$[
        Thread[Minesweeper`Private`v$ -> 0]], 
       And[
       Minesweeper`Private`priori$, 
        Minesweeper`Private`markRemains$2070[Minesweeper`Private`cell$] == 
        Length[Minesweeper`Private`v$]], 
       Minesweeper`Private`k$[
        Thread[Minesweeper`Private`v$ -> 1]], True, 
       Minesweeper`Private`solve0$2070[
       Minesweeper`Private`k$, Minesweeper`Private`v$, -1]]], 
    Attributes[Minesweeper`Private`priori$] = {Temporary}, 
    Attributes[Minesweeper`Private`v$] = {Temporary}, 
    Attributes[Minesweeper`Private`solve0$2070] = {Temporary}, 
    Minesweeper`Private`solve0$2070[
      Pattern[Minesweeper`Private`k$, 
       Blank[]], 
      Pattern[Minesweeper`Private`lst$, 
       Blank[]], 
      Pattern[Minesweeper`Private`remains$, 
       Blank[]]] := Block[{C}, 
      Common`Let[{Minesweeper`Private`involved = Fold[Union[#, 
           
           Minesweeper`Private`neighbors$2070[#2, 
            Minesweeper`Private`clicked$2070]]& , {}, 
          Minesweeper`Private`lst$], Minesweeper`Private`vars = Map[C, 
          Union[
           Fold[Union[#, 
             
             Minesweeper`Private`neighbors$2070[#2, 
              Minesweeper`Private`freeQ$2070]]& , {}, 
            Minesweeper`Private`involved], Minesweeper`Private`lst$]], 
        Minesweeper`Private`eqn = Append[
          Append[
           Map[Total[
              Map[C, 
               
               Minesweeper`Private`neighbors$2070[#, 
                Minesweeper`Private`freeQ$2070]]] == 
            Minesweeper`Private`markRemains$2070[#]& , 
            Minesweeper`Private`involved], 
           If[
           Minesweeper`Private`remains$ < 0, Nothing, 
            Total[Minesweeper`Private`vars] == Minesweeper`Private`remains$]],
           0 <= Minesweeper`Private`vars <= 1], Minesweeper`Private`sol = 
        Solve[Minesweeper`Private`eqn, Minesweeper`Private`vars, Integers], 
        Minesweeper`Private`unify = 
        If[Length[Minesweeper`Private`sol] == 0, {}, 
          Normal[
          Merge[Minesweeper`Private`sol, Total]/Length[
           Minesweeper`Private`sol]]]}, Common`verbose[
         If[
         Count[Minesweeper`Private`unify, Blank[] -> Alternatives[0, 1]] > 0, 
          
          Column[
           ReplaceAll[{Minesweeper`Private`eqn, Minesweeper`Private`unify}, C[{
               Pattern[Minesweeper`Private`x, 
                Blank[]], 
               Pattern[Minesweeper`Private`y, 
                Blank[]]}] :> 
            Subscript[C, Minesweeper`Private`x, Minesweeper`Private`y]]]]]; 
       Minesweeper`Private`k$[
         ReplaceAll[Minesweeper`Private`unify, C[
            Pattern[Minesweeper`Private`pos, 
             Blank[]]] :> Minesweeper`Private`pos]]]], 
    Attributes[Minesweeper`Private`lst$] = {Temporary}, 
    Attributes[Minesweeper`Private`remains$] = {Temporary}, 
    Attributes[Common`Let] = {HoldAll}, 
    UpSetDelayed[
     Verbatim[SetDelayed][
      Pattern[Common`Private`lhs, 
       Blank[]], 
      Pattern[Common`Private`rhs, 
       Common`Let[{
         BlankSequence[]}, 
        Blank[]]]], 
     Block[{With}, Attributes[With] = {HoldAll}; 
      Common`Private`lhs := Evaluate[Common`Private`rhs]]], Common`Let[{}, 
      Pattern[Common`Private`expr, 
       Blank[]]] := Common`Private`expr, Common`Let[{
       Pattern[Common`Private`head, 
        Blank[]]}, 
      Pattern[Common`Private`expr, 
       Blank[]]] := With[{Common`Private`head}, Common`Private`expr], 
    Common`Let[{
       Pattern[Common`Private`head, 
        Blank[]], 
       Pattern[Common`Private`tail, 
        BlankSequence[]]}, 
      Pattern[Common`Private`expr, 
       Blank[]]] := 
    Block[{With}, Attributes[With] = {HoldAll}; With[{Common`Private`head}, 
        Evaluate[
         Common`Let[{Common`Private`tail}, Common`Private`expr]]]], 
    TagSet[Common`Let, 
     MessageName[Common`Let, "usage"], 
     "Consecuitive bindings for With scoping construct."], Common`verbose[
      Pattern[Common`Private`val, 
       Blank[]]] := Common`Private`val, 
    TagSet[Common`verbose, 
     MessageName[Common`verbose, "usage"], 
     "Print verbose expression value in a VerboseBlock."], 
    Attributes[Subscript] = {NHoldRest}, 
    Attributes[Minesweeper`Private`clean] = {HoldFirst}, 
    Minesweeper`Private`clean[
      Pattern[Minesweeper`Private`s, 
       Blank[Symbol]]] := StringDelete[
      RegularExpression["\\$.*$"]][
      SymbolName[
       Unevaluated[Minesweeper`Private`s]]], 
    Attributes[Minesweeper`Private`args$] = {Temporary}, 
    Attributes[Minesweeper`Private`self$2072] = {HoldFirst, Temporary}, 
    Minesweeper`Private`self$2072[
      Pattern[Minesweeper`Private`s$, 
       Blank[Symbol]]] := Minesweeper`Private`dispatch$2072[
      Minesweeper`Private`clean[Minesweeper`Private`s$]], 
    Minesweeper`Private`self$2072[
      Pattern[Minesweeper`Private`s$, 
       Blank[Symbol]][
       Pattern[Minesweeper`Private`args$, 
        BlankNullSequence[]]]] := Minesweeper`Private`dispatch$2072[
      Minesweeper`Private`clean[Minesweeper`Private`s$], 
      Minesweeper`Private`args$], 
    Attributes[Minesweeper`Private`dispatch$2072] = {Temporary}, 
    Minesweeper`Private`dispatch$2072["mousePos"] := 
    Floor[{Minesweeper`Private`self$2070[Minesweeper`Private`rows] + 1, 
        1} + {-Minesweeper`Private`self$2070[Minesweeper`Private`rows], 
         Minesweeper`Private`self$2070[Minesweeper`Private`cols]} Reverse[
         MousePosition["EventHandlerScaled"]]], 
    Minesweeper`Private`dispatch$2072["plotBoard", 
      Optional[
       Pattern[Minesweeper`Private`highlights$, 
        Blank[]], {}]] := 
    With[{Minesweeper`Private`board$ = 
       Minesweeper`Private`self$2070[Minesweeper`Private`show], 
       Minesweeper`Private`bg$ = 
       Minesweeper`Private`colorMap$2072[Minesweeper`Private`highlights$]}, 
      MouseAppearance[
       Grid[
        MapIndexed[Item[
          Minesweeper`Private`item$2072[#], Background -> 
          Minesweeper`Private`bg$[
            SlotSequence[1]]]& , Minesweeper`Private`board$, {2}], Frame -> 
        All, FrameStyle -> GrayLevel[GoldenRatio - 1], ItemSize -> {1.2, 1.2},
         Spacings -> {0.7, 0.7}, Alignment -> {Center, Center}], "Arrow"]], 
    Attributes[Minesweeper`Private`highlights$] = {Temporary}, 
    Attributes[Minesweeper`Private`board$] = {Temporary}, 
    Attributes[Minesweeper`Private`bg$] = {Temporary}, 
    Attributes[Minesweeper`Private`colorMap$2072] = {Temporary}, 
    Minesweeper`Private`colorMap$2072[
      Pattern[Minesweeper`Private`highlights$, 
       Blank[]]] := With[{Minesweeper`Private`seq$ = Apply[Join, 
         Map[Thread, 
          ReplaceAll[
          Minesweeper`Private`highlights$, Pattern[Minesweeper`Private`x, 
             Blank[RGBColor]] :> (Minesweeper`Private`x& )]]]}, 
      If[Length[Minesweeper`Private`seq$] == 0, 
       Minesweeper`Private`bgcolor$2057[#]& , 
       With[{
        Minesweeper`Private`colorRules = 
         SparseArray[Minesweeper`Private`seq$, {
            Minesweeper`Private`self$2070[Minesweeper`Private`rows], 
            Minesweeper`Private`self$2070[Minesweeper`Private`cols]}, 
           Minesweeper`Private`bgcolor$2057]}, Part[
        Minesweeper`Private`colorRules, 
         Apply[Sequence, #2]][#]& ]]], 
    Attributes[Minesweeper`Private`seq$] = {Temporary}, 
    Attributes[Minesweeper`Private`bgcolor$2057] = {Temporary}, 
    Minesweeper`Private`bgcolor$2057["X"] = RGBColor[1, 0, 0], 
    Minesweeper`Private`bgcolor$2057[
      Alternatives["x", "w", 
       Blank[Integer]]] = RGBColor[0.87, 0.94, 1], 
    Minesweeper`Private`bgcolor$2057[
      Blank[]] = GrayLevel[0.85], 
    Attributes[Minesweeper`Private`item$2072] = {Temporary}, 
    Minesweeper`Private`item$2072[
      Pattern[Minesweeper`Private`t$, 
       Alternatives["x", "X", "m", "w"]]] := 
    Minesweeper`Private`image$2057[Minesweeper`Private`t$], 
    Minesweeper`Private`item$2072[
      Condition[
       Pattern[Minesweeper`Private`n$, 
        Blank[Integer]], Minesweeper`Private`n$ != 0]] := 
    Style[Minesweeper`Private`n$, 
      Minesweeper`Private`fgcolor$2057[Minesweeper`Private`n$], FontFamily -> 
      "Arial", FontSize -> 12, Bold], Minesweeper`Private`item$2072[
      Blank[]] = " ", Attributes[Minesweeper`Private`t$] = {Temporary}, 
    Attributes[Minesweeper`Private`image$2057] = {Temporary}, 
    Minesweeper`Private`image$2057["m"] = Image[CompressedData["
1:eJzt188rg3EcwPGv+XnAFFFOHJw4zEE5KTeu01PitGWWy1abEklJTm4OTq6E
k4N/wM+zA4WVnNgUIQeKzftr3+VraXls++7g+dZr9Tz1fN7f5+nZau3+sHfc
JYSI1vDh9U31RyK+6aEGDqxQdCIYCowNhiYDwUCk11/OyTalQjgrz9WtlGJ5
8K54TEVTQlRhdFWIWPrwk2Wg24olXOB566tdtD6DXRjALm6QREoqZp+BzVjE
OR4yTV0x+gzqwTau8PZTt9B9LnZjBme4z9UsUr8Oc4jJ98p0X9uHfNcsHOPO
dD9rL33YQ6IUfW0fHdjEtf7dM9XX9tGCZVzi1XRf20ctZuU+NoR4Md3X9lEZ
FmKlVH21LKfv9J2+sX4XFnCIE8S1flydO8A8OgvULMOImn0rvv/m5pJQ1wyr
GX9ZTSJ9P082utkesY9Gm203TpHMo50hZ8hnUW+jvy7S/yvybWfIWWu/bFdj
B0cFJmdW2XgG/2J9AD9hZlo=
      "], "Byte", ColorSpace -> "RGB", Interleaving -> 
      True], Minesweeper`Private`image$2057["w"] = Image[CompressedData["
1:eJzFl01vUkEUhqcqrQsWbiD4GQ0Jv8FcQlK7c9Ok1aYJGEhBbKiFGmpihAVN
IHHZuNNoXLh0axR/gMZ/RBcCx/NyL3iZztyZqVZO+kKZO3OeMzNnPu6d8sHm
kwtCiMPL/LG58+Jes7nz8sEV/rHVOKztNqqP7zeeV3erzbvli1x4O9AlFvEf
a8SqCHfLBnIysAImSd8uMRz7riY6/gt2OfR7zKpZuhqE+ANLtpIll78S4icX
r5ndzSnKVjtC/Bj7TGU/EcP0OX/THsfDxduSn1usOuubgo+yfdZNqc02T+po
5HMjx/hIiO/TelIM11lvWUOwYrEYpVIpymQylEwm5TjQ5pPwU3yODZ/B2Ops
Ta4fxHAC3+l0mvL5PHU6Her1ehO1Wi2ZP8sJja/VCD7sodzu2coKlUqlGbPb
7VK9XqdisUjZbFbJL7MU7IKBrY2hv75O7XabcrkcxeNxXZ+VbJ7ssQMbdoN1
UuN+j5eWZn4OlpcjuRo2yjF/1xz4H+ALY/55Y2Muhpo7e6p3lmyssSFyDXON
Mcc4RPi1YUPDYFxN1kD9QqEw4WO+Tf4t2FM9teD3sb6xxpDn4VxTcRzY0BcN
E+fHbD/H3oK+Y43JPioh3kj6v2LIzZAG4s+Z5cnPsa+Bj/Wtah+O4QzssDwV
P5FITPLO8zxjnluOexT/1PhH6RzGX7a+rt055l/Y9m3ZNs8k2dxtcH4PbdkO
dX4Ju/0H9v4MfTPVfWPJhuG+MXCc26gYkG9XHfhb8vnrsr405++j/8HWxRDc
P0wx6O5fVnuDJOf715H+/plgvRZ+Dpu4aPNR+PNtff8ku/s31g/O0K8KLvaW
PXF6jRnv37TA9w+ZLccWYf/k/YvEwt8/F/r+/Ru8/pqH
      "], "Byte", ColorSpace -> 
      "RGB", Interleaving -> True], Minesweeper`Private`image$2057[
      Alternatives["x", "X"]] = Image[CompressedData["
1:eJzFl89LAkEUx4dMCPTQxR+VRSH4N8SKUN26ViJoKIoWVlpZEunBg96jW1Fk
dOxe9pfpIWOa77Zjy7Srs7qbD76y7s7O5+28NzNv1nKnOwczhJCLOfazk73a
rFSy17vz7E+8fFE8LBfy2+XLwmGhsp5zsZurmmbJxBbVNA27YaKabqbA7+r4
XZv6RBTPmZ6Ztka0pYKG2YbW57nGMLMzXX+fTAnh+QpTienDgI97J0zLwjsJ
rS/e7mwIvy30yX1YYrpn6uO+2+2mwWCQRiIR6vf7RT++mF7JT4qLbKoxzGzL
oD2YPVyHw2GaTCZpo9GgrVZLVa1WE/n6nOgbfM/GED5sT/TB6/XSTCYzYDab
TVoqlWg6nabRaNSMLwq+pEaw9T6ovgcCAVqtVlVuvV6nsVhM9UeSqY+JLBsW
YuqBw9n5fJ56PB6rXC7Eb9EC/wnv8TEH2+VyjcvmepBkY471kWt8zCf4bjH+
IQl+Ge1TqZTKR7xtYHMdS/A7mN+YY8jzMXJtmN5MmNg/Bus51hZ8O+aYjWy9
uuR3z1LE51jXwMf8dojPpRjxfT6fmneKovwH/8/4/4P04y9ax0GuWf7p7cRB
flGCj/1b3LfsEPY0mfUH9ugA/06SDUO9YWc+oq8FC/w4sTcG2H/3LbDFGsgO
9SV8MKu/xonFOPVX26A9akgf063kuGCsX8hPvK3Wn6Pqb8wf7KHvBlysLUfk
7xyzUn9P+/xhxZw4f1mxaZ8/YROfv78BKw95gA==
      "], "Byte", ColorSpace -> 
      "RGB", Interleaving -> True], 
    Attributes[Minesweeper`Private`n$] = {Temporary}, 
    Attributes[Minesweeper`Private`fgcolor$2057] = {Temporary}, 
    Minesweeper`Private`fgcolor$2057 = 
    Association[
     1 -> RGBColor[0, 0, 1], 2 -> RGBColor[0, 2/3, 0], 3 -> RGBColor[1, 0, 0],
       4 -> RGBColor[0, 0, 2/3], 5 -> RGBColor[1, 0, 1], 6 -> 
      RGBColor[0, 2/3, 2/3], 7 -> RGBColor[2/3, 2/3, 0], 8 -> 
      GrayLevel[0]]}]], "Output",
 CellChangeTimes->{{3.729241077746839*^9, 3.729241077983251*^9}, {
   3.729242105549857*^9, 3.729242105913463*^9}, {3.729242200569435*^9, 
   3.729242200898293*^9}, {3.729242717781855*^9, 3.729242718144368*^9}, {
   3.729242786495029*^9, 3.72924278681301*^9}, {3.729243080886176*^9, 
   3.7292430812845573`*^9}, {3.729243382813806*^9, 3.729243383108418*^9}, {
   3.729250771239193*^9, 3.72925077158766*^9}, {3.7292508371056957`*^9, 
   3.729250837452738*^9}, 3.7292791809693537`*^9, 3.729279929608698*^9, {
   3.729369006454824*^9, 3.72936901735168*^9}, 3.729369591763558*^9, {
   3.729369746476471*^9, 3.729369763412388*^9}, {3.7293697939545193`*^9, 
   3.7293698241223927`*^9}, {3.729371739414308*^9, 3.72937176664889*^9}, 
   3.729391950106813*^9, {3.729394697009637*^9, 3.729394785308921*^9}, 
   3.729396593874609*^9, 3.729396669431806*^9, 3.7293968976920023`*^9, 
   3.7294469081731253`*^9},ExpressionUUID->"1c792545-3367-4b4d-ac30-\
5d4faff76a34"]
}, {2}]]
},
InitializationCellEvaluation->Automatic,
InitializationCellWarning->False,
WindowSize->{2048, 1107},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Visible->True,
FrontEndVersion->"11.2 for Mac OS X x86 (32-bit, 64-bit Kernel) (2017\:5e7410\
\:67083\:65e5)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[422, 15, 565, 15, 140, "Input",ExpressionUUID->"2221c1e8-436a-4c42-84b4-1a6deb88142a"],
Cell[990, 32, 41808, 879, 611, "Output",ExpressionUUID->"1c792545-3367-4b4d-ac30-5d4faff76a34"]
}, {2}]]
}
]
*)

